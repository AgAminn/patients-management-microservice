#!/usr/bin/env groovy
// def configx = readYaml file: 'ci_config/jenkins_crp.yaml'

pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')   // timeout on whole pipeline job
    }
    agent any

    environment {
        config = readYaml file: "ci_config/jenkins_crp.yaml"
        CURRENT_GIT_BRANCH = "${git_branch}"
        BUILD_TYPE = "debug"
        PROJECT_NAME = "${config.properties.project_name}"
    }

    stages {

        stage('Init') {
            steps {
                script {
                    def properties = readYaml(file: 'jenkins_crp.yaml')
                    def propertyMap = properties.properties

                    propertyMap.each { propName, propValue ->
                        env."${propName}" = propValue
                    }

                    echo "Initialized environment variables:"
                    propertyMap.each { propName, propValue ->
                        echo "${propName}: ${env."${propName}"}"
                    }
                }
            }
        }
        
        // stage ('Init' ) {
        //     steps {
        //         script {
        //             echo 'welcome to Code Review Pipeline'
        //             echo 'Init env values'
        //             config = readYaml file: "ci_config/jenkins_crp.yaml"

        //             sh 'pwd' // Print current working directory
        //             sh 'ls -lR' 
        //             // echo config.properties.project_name
        //             // sh "${config.stages.init}"
        //             // initCommands = config.stages.init
        //             // echo initCommands
        //             // for (String command : initCommands) {
        //                 // sh """#!/bin/bash
        //                 // ${command}
        //                 // """
        //             // }

        //             sh 'echo finished loading jenkins_crp.yaml'
        //             sh "echo project name ${env.PROJECT_NAME}"
        //             sh "echo git branch name ${env.CURRENT_GIT_BRANCH}"

        //         }
        //     }
        // }

        stage ("Test" ) {
            steps {
                echo 'check code quqlity'
                
                
            }
        }

        stage ("Build" ) {
            steps {
                echo 'Build docker image'
                // docker build -t jkz-app:0.1 .
                
            }
        }

        stage ("Publish" ) {
            steps {
                echo 'Publish docker image'
                
            }
        }

        stage ("Deploy" ) {
            steps {
                echo 'Deploy pod -- helm install'
            }
        }

        stage ("Clean Up" ) {
            steps {
                echo 'remove dangling docker images'
            }
        }

    }
}